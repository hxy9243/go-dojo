/*
 * OpenAPI Library Demo App
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type Book struct {

	// the id of the book
	Id string `json:"id,omitempty"`

	// the id of the book
	Title string `json:"title,omitempty"`

	// ISBN book number
	Isbn string `json:"isbn,omitempty"`

	// the id of the book
	Authors []Author `json:"authors,omitempty"`

	// name of the publisher
	Publisher string `json:"publisher,omitempty"`

	// time the book is published
	Published time.Time `json:"published,omitempty"`

	// the description of the book
	Description string `json:"description,omitempty"`

	// the genre of this book
	Genre string `json:"genre,omitempty"`

	// the tags of the book
	Tags []string `json:"tags,omitempty"`
}

// AssertBookRequired checks if the required fields are not zero-ed
func AssertBookRequired(obj Book) error {
	for _, el := range obj.Authors {
		if err := AssertAuthorRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseBookRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Book (e.g. [][]Book), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBookRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBook, ok := obj.(Book)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBookRequired(aBook)
	})
}
